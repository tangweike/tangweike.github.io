* jsp:Java Server Pages 
	* jsp概念：
		Java服务器端页面。简单的理解为，一个既可以定义HTML标签，又可以定义Java代码的页面
		可以简化书写。
	* jsp原理：
		本质就是一个Servlet
	* jsp脚本：用于标识Java代码的
		* <%! %>:定义全局成员的（定义在类中，方法外）
		* <% %> ：定义 局部成员的 (定义在service方法中)
		* <%= %>:定义输出语句。(打印到页面上)
	* jsp注释：
		* <!-- -->:标记语言注释
			* 这种注释会发送给客户端。
			* 这种注释不能注释jsp脚本
		
		* <%-- --%>：jsp注释，快捷键  ctrl + shift + /
			* 这种注释不会发送给客户端。
			* 这种注释能注释jsp脚本
	
	* 3个指令
		* 指令用于配置jsp文件的信息。加载一些资源文件。
		* 指令分类：
			page：用于配置jsp文件的信息
			include：用于包含页面
			taglib：加载一些资源文件
			
		* 指令格式：
			<%@ 指令名称	属性名="属性值"  %>

		* page指令：用于配置jsp文件的信息
			* language：用于指定服务器端使用的语言环境，就一个值 Java
			* import：用于导包。可以定义多个。
			* pageEncoding：既可以指定页面编码，也会告诉浏览器，当前页面的编码方式
			* contentType：告诉浏览器，当前页面的编码方式
			* autoFlush：自动刷新缓冲区
			* buffer：response输出流的缓冲区大小。默认8KB
			* errorPage：指定错误页面的路径。如果这个页面出现了异常。会跳转到指定的页面去
				* 一般我们在xml中 通过 <error-page>来指定错误页面
			* isErrorPage：指定当前页面是否是错误页面。如果为true，则是。则可以使用exception内置对象。反之，同理
			* session：是否支持session
		
	
		* include：用于静态包含页面
			* <%@ include file="b.jsp" %>
			* 作用：一般用于包含一些html页面，完成布局
			* 特点：
				只会生成一个.java文件。先包含，在运行。
		
		* taglib:加载一些资源文件
		
		
	* 6个动作标签
		* 动作标签：用于替换页面上的Java代码。简化书写，使得页面更加清晰
			<jsp:useBean> 
				使用一个ID和一个给定作用范围和同一ID的JavaBean相关联
			<jsp:setProperty> 
				设置JavaBean的属性值
			<jsp:getProperty> 
				取得JavaBean的属性值
			
			* 内省：对反射的封装。通过字段名称，找到其对应的setter和getter方法。并执行。
			
			<jsp:include>  
				动态包含
				* 特点：
					1.先执行，再包含
					2.有多个.java文件.
					3.一般包含jsp文件。
				
			<jsp:forward> 
				接受用户输入并将请求分派给另一页面
				<jsp:forward page="/result.jsp" >，一般在首页会转发到一个Servlet做查询
			<jsp:param>
				包含或转发时传递参数的
	
	
	* 9个内置对象
		* 内置对象：在jsp转换为的servlet中的service方法中初始化好的对象。
					在jsp中可以直接使用，不用创建的对象
		
		分类：
			application:ServletContext
			session:HttpSession
			request:HttpServletRequest
			pageContext:PageContext
			
			response:HttpServletResponse
			out:response输出流等价
			page：this
			exception：异常对象  Throwable
			config：ServletConfig 配置对象
	
	
		* pageContext:
			* 域对象，域的范围，当前页面
			* 获取其他八个内置对象
		
		* out和response.getWriter()区别:
			* 区别：当服务器真正作出响应之前，会先将out缓冲区的数据，刷新到response缓冲区，
					再从response缓冲区获取数据。作出响应
			
			* 结论：两个不要一起使用。建议使用out对象
			
	
------------------------------------------------------------------------------	
		
* MVC：
	* M：Model 模型-->JavaBean
	* V：View 视图 -->jsp
	* Controller：控制器 -->Java代码

* web的三层架构：
	WEB层：包含JSP和Servlet等与WEB相关的内容；
	业务层：业务层 中不包含JavaWeb API，它只关心业务逻辑；
	数据层：封装了对数据库的访问细节；
